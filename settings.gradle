import java.util.regex.Pattern

gradle.addBuildListener(new BuildListener() {
    def genApiBuildFileName = 'aar2jarbuild.gradle'
    def genSubProjectName = 'pitaya-api-autogen'

    @Override
    public void buildStarted(Gradle gradle) {
        System.out.println("!! buildStarted")
    }

    @Override
    public void settingsEvaluated(Settings settings) {
        System.out.println("from setting.gradle " + rootDir)
        File apiDir = new File(rootDir, "${genSubProjectName}/src/main/java")
        if (!apiDir.exists()) {
            apiDir.mkdirs()
        }

        //TODO 记录修改时间 未变化则不Copy

//        copy {
//            from("${rootDir}/${genApiBuildFileName}")
//            into("${rootDir}/${genSubProjectName}")
//            rename { file -> file.replace(genApiBuildFileName, 'build.gradle') }
//        }

        copy {
            from("/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/PitayaInterface.java")
            into("/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/src/main/java/com/pitaya/")
        }

        settings.include(":${genSubProjectName}")
        System.out.println("!! settingsEvaluated => ${settings}")
    }

    @Override
    public void projectsLoaded(Gradle gradle) {
        //!! projectsLoaded  root project 'gradle-import-aar' [project ':pitaya-api-autogen', project ':pure-java-lib']
        System.out.println("!! projectsLoaded  ${gradle.getRootProject()} ${gradle.getRootProject().getSubprojects()}")


        gradle.getRootProject().getSubprojects().each { targetProject ->
            if (targetProject.getDisplayName().contains(genSubProjectName)) {
                System.out.println("!! projectsEvaluated  **---" + targetProject.getDisplayName())
                return
            }

            System.out.println("!! projectsEvaluated  -----" + targetProject.getDisplayName())

//            targetProject.afterEvaluate {
//                targetProject.logger.error "provided Configuration find => ${ targetProject.getConfigurations().getByName("provided")}"
//
//                targetProject.dependencies {
//                    targetProject.getConfigurations().getByName("provided").dependencies.add( targetProject.dependencies.project(path: ':pitaya-api-autogen'))
//                }
//
//            }

//            project.afterEvaluate {
//                project.dependencies.add("provided", project.dependencies.project(path: ":${genSubProjectName}"))
//                project.dependencies.add("provided", files('/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar'))
//            }

//          project.dependencies.add("compileOnly", files("/Users/Smarking/AndroidStudioProjects/newworld/gradle-import-aar/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar"))

//            project.dependencies {
//                compileOnly files("/Users/Smarking/AndroidStudioProjects/newworld/gradle-import-aar/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar")
//                if (isGradle3()) {
//                    compileOnly project.dependencies.project(path: ":${genSubProjectName}")
//                } else {
//                    project.dependencies.add("provided", project.dependencies.project(path: ":${genSubProjectName}"))
//                }

//                project.dependencies.add("compile", files('/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar'))
//                compile files('/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar')
//            }
        }

    }

    @Override
    public void projectsEvaluated(Gradle gradle) {
        System.out.println("!! projectsEvaluated")

//
//        gradle.getRootProject().getSubprojects().each { targetProject ->
//            if (targetProject.getDisplayName().contains(genSubProjectName)) {
//                System.out.println("!! projectsEvaluated  **---" + targetProject.getDisplayName())
//                return
//            }
//
//            System.out.println("!! projectsEvaluated  -----" + targetProject.getDisplayName())
//
//
//            targetProject.afterEvaluate {
//
//                targetProject.dependencies {
//                    provided targetProject.dependencies.project(path: ':pitaya-api-autogen')
//                }
//
//                project.logger.error "provided Configuration find => ${ targetProject.getConfigurations().getByName("provided")}"
//            }
//
////            project.afterEvaluate {
////                project.dependencies.add("provided", project.dependencies.project(path: ":${genSubProjectName}"))
////                project.dependencies.add("provided", files('/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar'))
////            }
//
////          project.dependencies.add("compileOnly", files("/Users/Smarking/AndroidStudioProjects/newworld/gradle-import-aar/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar"))
//
////            project.dependencies {
////                compileOnly files("/Users/Smarking/AndroidStudioProjects/newworld/gradle-import-aar/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar")
////                if (isGradle3()) {
////                    compileOnly project.dependencies.project(path: ":${genSubProjectName}")
////                } else {
////                    project.dependencies.add("provided", project.dependencies.project(path: ":${genSubProjectName}"))
////                }
//
////                project.dependencies.add("compile", files('/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar'))
////                compile files('/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/pitaya-api-autogen/build/libs/pitaya-api-autogen.jar')
////            }
//        }
    }

    @Override
    public void buildFinished(BuildResult buildResult) {
        System.out.println("!! buildFinished => ${buildResult}")
    }

    private boolean isGradle3() {
        Pattern GRADLE_ACCEPTABLE_VERSIONS = Pattern.compile("4\\.\\d*|0\\.\\d*[1-9]\\d*\$")
        if (GRADLE_ACCEPTABLE_VERSIONS.matcher(getGradle().getGradleVersion()).matches()) {
            return true
        }
        return false
    }
})


include ':app', ':checkout', ':printer', ':vippay', ':baselib', ':comprotocol', ':commanager', ':comannotation', ':lib'