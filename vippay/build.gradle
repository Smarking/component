apply plugin: 'com.android.library'
apply plugin: 'com.pitaya.apicomponent'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'maven'

android {
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion
    defaultConfig {
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resourcePrefix "vippay_"

    }
    buildTypes {

        debug {
            buildConfigField "boolean", "ENV_OFFLINE", "true"
        }

        release {
            buildConfigField "boolean", "ENV_OFFLINE", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile deps.butterknife
    annotationProcessor deps.butterknifeCompiler

    compile deps.BaseRecyclerViewAdapterHelper
    compile deps.support.recyclerview

    compile 'com.pitaya.component:baselib:0.0.1'
    compile 'com.pitaya.component:commanager:0.0.1'

    bundleCompile('com.pitaya.component:checkout:0.0.1') {
        exclude group: 'com.pitaya.component', module: 'vippay'
    }
}

/**
 * 执行以下命令，发布到指定仓库，比如customerPath
 *   ./gradlew :vippay:clean :vippay:uploadArchives --info  --stacktrace
 */

def publishedGroupId = 'com.pitaya.component'
def artifact = 'vippay'
def libraryName = 'vippay'
def publishVersion = '0.0.1'
//
//uploadArchives {
//    repositories.mavenDeployer {
//        name = 'mavenCentralReleaseDeployer'
////        repository(url: "http://nexus:8081/nexus/content/repositories/releases") {  //配置仓库路径
////            authentication(userName: AAR_USER_NAME, password: AAR_USER_PASSWORD)
////        }
//
//        snapshotRepository(url: "http://nexus:8081/nexus/content/repositories/snapshots") {
//            authentication(userName: AAR_USER_NAME, password: AAR_USER_PASSWORD)
//        }
//
//        pom.groupId = publishedGroupId //对外发布的插件包名，具有唯一标示性，并且包含插件集合，
//        // 每个插件的名字由文件 com.smarking.findviewbyid.properties名决定，文件内部配置该插件入口。见实例
//        pom.artifactId = artifact
//        pom.version = publishVersion
//        pom.packaging = 'aar'
//    }
//}


def customerPath = uri(System.getProperties().getProperty("user.home") + "/localMavenRepo/")
println "repository " + customerPath.getPath()

/**
 * 执行以下命令，发布到指定仓库，比如customerPath
 *  ./gradlew -p vippay clean build uploadArchives --info
 */
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: customerPath)
            pom.groupId = publishedGroupId
            pom.artifactId = artifact
            pom.version = publishVersion
            pom.name = libraryName
            pom.packaging = 'aar'
        }

    }
}