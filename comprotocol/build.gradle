apply plugin: 'com.android.library'

android {
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion
    defaultConfig {
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile deps.unit.junit
    compile deps.support.appcompatV7

    compile project(path: deps.comannotation)
}



task ProcessApiFileTask(type: Copy) {
    from '/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/comprotocol/src/main/java/com/pitaya/comprotocol/printer/PrinterComProtocol.api'
    into '/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/comprotocol/build/generated/source/api/com/pitaya/comprotocol/printer/'

    rename { String fileName ->
        fileName.replace('.api', '.java')
    }
}

project.android.sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated/source/api/']

    }
}

project.afterEvaluate {
    tasks.matching {
        it.name.startsWith('compile') && (it.name.endsWith('Aidl'))
    }.each { task -> task.dependsOn ProcessApiFileTask }
//
//    tasks.matching {
//        it.name.equalsIgnoreCase('compileDebugJavaWithJavac') ||   it.name.equalsIgnoreCase('compileReleaseJavaWithJavac')
//    }.each { task ->
//        File apiFile = new File("/Users/Smarking/AndroidStudioProjects/newworld/ComponentDemo/comprotocol/build/generated/source/api/release/com/pitaya/comprotocol/printer/PrinterComProtocol.java");
//        project.logger.error "task name =>${task.name} ${apiFile.exists()}"
//
//        List<Object> sourceList = new ArrayList<Object>()
////        sourceList.add(task.getInputs().getSourceFiles())
////        sourceList.add(ProcessApiFileTask.getOutputs().files)
//
////        task.inputs.source(sourceList.toArray())
//        sourceList.add(apiFile.absolutePath)
//        task.inputs.source(sourceList.toArray())
//    }
}

//
//project.afterEvaluate {
//    project.android.applicationVariants.each { variant ->
//
//        def compileTask = project.tasks.add("compileApi", ProcessApiFileTask)
//
//        variant.aidlCompileTask.dependsOn compileTask
//
//        variant.javaCompileTask.getInputs.source(compileTask.inputs.files)
//
//    }
//}